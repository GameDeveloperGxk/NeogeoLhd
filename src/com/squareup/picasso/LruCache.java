/**
  * Generated by smali2java 1.0.0.558
  * Copyright (C) 2013 Hensence.com
  */

package com.squareup.picasso;

import java.util.LinkedHashMap;

import android.content.Context;
import android.graphics.Bitmap;

public class LruCache implements Cache {
    private int evictionCount;
    private int hitCount;
    final LinkedHashMap<String, Bitmap> map;
    private final int maxSize;
    private int missCount;
    private int putCount;
    private int size;
    
    public LruCache(Context p1) {
        this(Utils.calculateMemoryCacheSize(p1));
    }
    
    public LruCache(int p1) {
        if(p1 <= 0) {
            throw new IllegalArgumentException("Max size must be positive.");
        }
        maxSize = p1;
        map = new LinkedHashMap(0x0, 0.75f, true);
    }
    
    public Bitmap get(String p1) {
        if(p1 == null) {
            new NullPointerException("key == null");
            throw localNullPointerException1;
        }
        synchronized(this) {
            map = (Bitmap)map.get(p1);
            if(map != null) {
                hitCount = (hitCount + 0x1);
                return map;
            }
            missCount = (missCount + 0x1);
        }
        return null;
    }
    
    public void set(String p1, Bitmap p2) {
        if((p1 == null) || (p2 == null)) {
            new NullPointerException("key == null || bitmap == null");
            throw localNullPointerException1;
        }
        synchronized(this) {
            putCount = (putCount + 0x1);
            size = (size + Utils.getBitmapBytes(p2));
            map = (Bitmap)map.put(p1, p2);
            if(map != null) {
                size = (size - Utils.getBitmapBytes(map));
            }
        }
        trimToSize(maxSize);
    }
    
    private void trimToSize(int p1) {
        // :( Parsing error. Please contact me.
    }
    
    public final void evictAll() {
        trimToSize(-0x1);
    }
    
    public final synchronized int size() {
        return size;
    }
    
    public final synchronized int maxSize() {
        return maxSize;
    }
    
    public final synchronized void clear() {
        evictAll();
    }
    
    public final synchronized void clearKeyUri(String p1) {
        // :( Parsing error. Please contact me.
    }
    
    public final synchronized int hitCount() {
        return hitCount;
    }
    
    public final synchronized int missCount() {
        return missCount;
    }
    
    public final synchronized int putCount() {
        return putCount;
    }
    
    public final synchronized int evictionCount() {
        return evictionCount;
    }
}
