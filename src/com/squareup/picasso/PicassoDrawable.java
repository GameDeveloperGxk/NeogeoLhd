/**
  * Generated by smali2java 1.0.0.558
  * Copyright (C) 2013 Hensence.com
  */

package com.squareup.picasso;

import android.graphics.drawable.BitmapDrawable;
import android.graphics.Paint;
import android.graphics.drawable.Drawable;
import android.content.Context;
import android.graphics.Bitmap;
import android.content.res.Resources;
import android.util.DisplayMetrics;
import android.os.SystemClock;
import android.graphics.Canvas;
import android.graphics.Point;
import android.graphics.Path;
import android.widget.ImageView;
import android.graphics.drawable.AnimationDrawable;
import android.os.Build;
import android.graphics.Rect;
import android.graphics.ColorFilter;

final class PicassoDrawable extends BitmapDrawable {
    private static final float FADE_DURATION = 200.0f;
    boolean animating;
    private final boolean debugging;
    private final float density;
    private final Picasso.LoadedFrom loadedFrom;
    Drawable placeholder;
    long startTimeMillis;
    private static final Paint DEBUG_PAINT = new Paint();
    
    static void setBitmap(ImageView p1, Context p2, Bitmap p3, Picasso.LoadedFrom p4, boolean p5, boolean p6) {
        // :( Parsing error. Please contact me.
    }
    
    static void setPlaceholder(ImageView p1, Drawable p2) {
        setImageDrawable(p2);
        if(getDrawable() instanceof AnimationDrawable) {
            (AnimationDrawable)getDrawable().start();
        }
    }
    int alpha = 0xff;
    
    PicassoDrawable(Context p1, Bitmap p2, Drawable p3, Picasso.LoadedFrom p4, boolean p5, boolean p6) {
        super(p1.getResources(), p2);
        debugging = p6;
        density = p1.getResources().getDisplayMetrics().density;
        loadedFrom = p4;
        Picasso.LoadedFrom.MEMORY = p5 ? 0x1 : 0x0;
        (Picasso.LoadedFrom.MEMORY != null)) {
            placeholder = p3;
            animating = true;
            startTimeMillis = SystemClock.uptimeMillis();
        }
    }
    
    public void draw(Canvas p1) {
        if(!animating) {
            super.draw(p1);
        } else {
            (float)(SystemClock.uptimeMillis() - startTimeMillis) /= 200.0f;
            if((float)(SystemClock.uptimeMillis() - startTimeMillis) >= 1.0f) {
                animating = false;
                placeholder = 0x0;
                super.draw(p1);
            } else if(placeholder != null) {
                placeholder.draw(p1);
            } else {
                ((float)(SystemClock.uptimeMillis() - startTimeMillis) * (float)alpha) = (int)((float)(SystemClock.uptimeMillis() - startTimeMillis) * (float)alpha);
                super.setAlpha(Build.VERSION.SDK_INT);
                super.draw(p1);
                super.setAlpha(alpha);
                if(Build.VERSION.SDK_INT <= 0xa) {
                    invalidateSelf();
                }
            }
        }
        if(debugging) {
            drawDebugIndicator(p1);
        }
    }
    
    public void setAlpha(int p1) {
        alpha = p1;
        if(placeholder != null) {
            placeholder.setAlpha(p1);
        }
        super.setAlpha(p1);
    }
    
    public void setColorFilter(ColorFilter p1) {
        if(placeholder != null) {
            placeholder.setColorFilter(p1);
        }
        super.setColorFilter(p1);
    }
    
    protected void onBoundsChange(Rect p1) {
        if(placeholder != null) {
            placeholder.setBounds(p1);
        }
        super.onBoundsChange(p1);
    }
    
    private void drawDebugIndicator(Canvas p1) {
        DEBUG_PAINT.setColor(-0x1);
        localPoint1 = getTrianglePath(new Point(0x0, 0x0), (int)(16.0f * density));
        p1.drawPath(new Point(0x0, 0x0), DEBUG_PAINT);
        DEBUG_PAINT.setColor(loadedFrom.debugColor);
        localPoint1 = getTrianglePath(new Point(0x0, 0x0), (int)(15.0f * density));
        p1.drawPath(new Point(0x0, 0x0), DEBUG_PAINT);
    }
    
    private static Path getTrianglePath(Point p1, int p2) {
        Point localfloat1 = new Point((x + p2), y);
        Point localfloat2 = new Point(x, (y + p2));
        Path localPath3 = new Path();
        localPath3.moveTo((float)x, (float)y);
        localPath3.lineTo((float)localfloat1.x, (float)localfloat1.y);
        localPath3.lineTo((float)localfloat2.x, (float)localfloat2.y);
        return localPath3;
    }
}
