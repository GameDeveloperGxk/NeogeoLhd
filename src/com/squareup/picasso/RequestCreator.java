/**
  * Generated by smali2java 1.0.0.558
  * Copyright (C) 2013 Hensence.com
  */

package com.squareup.picasso;

import java.util.concurrent.atomic.AtomicInteger;
import android.graphics.drawable.Drawable;
import android.net.Uri;
import android.graphics.Bitmap;
import android.content.Context;
import android.content.res.Resources;
import java.io.IOException;
import android.widget.ImageView;
import android.widget.RemoteViews;
import android.app.Notification;
import java.util.List;

public class RequestCreator {
    private final Request.Builder data;
    private boolean deferred;
    private Drawable errorDrawable;
    private int errorResId;
    private int memoryPolicy;
    private int networkPolicy;
    private boolean noFade;
    private final Picasso picasso;
    private Drawable placeholderDrawable;
    private int placeholderResId;
    private Object tag;
    private static final AtomicInteger nextId = new AtomicInteger();
    private boolean setPlaceholder = true;
    
    RequestCreator(Picasso p1, Uri p2, int p3) {
        if(p1.shutdown) {
            throw new IllegalStateException("Picasso instance already shut down. Cannot submit new requests.");
        }
        picasso = p1;
        data = new Request.Builder(p2, p3, p1.defaultBitmapConfig);
    }
    
    RequestCreator() {
        picasso = 0x0;
        data = new Request.Builder(0x0, 0x0, 0x0);
    }
    
    public RequestCreator noPlaceholder() {
        if(placeholderResId != 0) {
            throw new IllegalStateException("Placeholder resource already set.");
        }
        if(placeholderDrawable != null) {
            throw new IllegalStateException("Placeholder image already set.");
        }
        setPlaceholder = false;
        return this;
    }
    
    public RequestCreator placeholder(int p1) {
        if(!setPlaceholder) {
            throw new IllegalStateException("Already explicitly declared as no placeholder.");
        }
        if(p1 == 0) {
            throw new IllegalArgumentException("Placeholder image resource invalid.");
        }
        if(placeholderDrawable != null) {
            throw new IllegalStateException("Placeholder image already set.");
        }
        placeholderResId = p1;
        return this;
    }
    
    public RequestCreator placeholder(Drawable p1) {
        if(!setPlaceholder) {
            throw new IllegalStateException("Already explicitly declared as no placeholder.");
        }
        if(placeholderResId != 0) {
            throw new IllegalStateException("Placeholder image already set.");
        }
        placeholderDrawable = p1;
        return this;
    }
    
    public RequestCreator error(int p1) {
        if(p1 == 0) {
            throw new IllegalArgumentException("Error image resource invalid.");
        }
        if(errorDrawable != null) {
            throw new IllegalStateException("Error image already set.");
        }
        errorResId = p1;
        return this;
    }
    
    public RequestCreator error(Drawable p1) {
        if(p1 == null) {
            throw new IllegalArgumentException("Error image may not be null.");
        }
        if(errorResId != 0) {
            throw new IllegalStateException("Error image already set.");
        }
        errorDrawable = p1;
        return this;
    }
    
    public RequestCreator tag(Object p1) {
        if(p1 == null) {
            throw new IllegalArgumentException("Tag invalid.");
        }
        if(tag != null) {
            throw new IllegalStateException("Tag already set.");
        }
        tag = p1;
        return this;
    }
    
    public RequestCreator fit() {
        deferred = true;
        return this;
    }
    
    RequestCreator unfit() {
        deferred = false;
        return this;
    }
    
    public RequestCreator resizeDimen(int p1, int p2) {
        // :( Parsing error. Please contact me.
    }
    
    public RequestCreator resize(int p1, int p2) {
        data.resize(p1, p2);
        return this;
    }
    
    public RequestCreator centerCrop() {
        data.centerCrop();
        return this;
    }
    
    public RequestCreator centerInside() {
        data.centerInside();
        return this;
    }
    
    public RequestCreator onlyScaleDown() {
        data.onlyScaleDown();
        return this;
    }
    
    public RequestCreator rotate(float p1) {
        data.rotate(p1);
        return this;
    }
    
    public RequestCreator rotate(float p1, float p2, float p3) {
        data.rotate(p1, p2, p3);
        return this;
    }
    
    public RequestCreator config(Bitmap.Config p1) {
        data.config(p1);
        return this;
    }
    
    public RequestCreator stableKey(String p1) {
        data.stableKey(p1);
        return this;
    }
    
    public RequestCreator priority(Picasso.Priority p1) {
        data.priority(p1);
        return this;
    }
    
    public RequestCreator transform(Transformation p1) {
        data.transform(p1);
        return this;
    }
    
    public RequestCreator transform(List<unknown_type> p1) {
        data.transform(p1);
        return this;
    }
    
    public RequestCreator skipMemoryCache() {
        return memoryPolicy(MemoryPolicy.NO_CACHE, new MemoryPolicy[] {MemoryPolicy.NO_STORE});
    }
    
    public RequestCreator memoryPolicy(MemoryPolicy p1, MemoryPolicy[] p2) {
        if(p1 == null) {
            throw new IllegalArgumentException("Memory policy cannot be null.");
        }
        memoryPolicy = (memoryPolicy | p1.index);
        if(p2 == null) {
            throw new IllegalArgumentException("Memory policy cannot be null.");
        }
        if(p2.length > 0) {
            MemoryPolicy localint1 = p2[0x0]0x0 = 0x0 + 0x1) {
                if(localint1 == null) {
                    throw new IllegalArgumentException("Memory policy cannot be null.");
                }
                memoryPolicy = (localint1.index | memoryPolicy);
            }
        }
        return this;
    }
    
    public RequestCreator networkPolicy(NetworkPolicy p1, NetworkPolicy[] p2) {
        if(p1 == null) {
            throw new IllegalArgumentException("Network policy cannot be null.");
        }
        networkPolicy = (networkPolicy | p1.index);
        if(p2 == null) {
            throw new IllegalArgumentException("Network policy cannot be null.");
        }
        if(p2.length > 0) {
            NetworkPolicy localint1 = p2[0x0]0x0 = 0x0 + 0x1) {
                if(localint1 == null) {
                    throw new IllegalArgumentException("Network policy cannot be null.");
                }
                networkPolicy = (localint1.index | networkPolicy);
            }
        }
        return this;
    }
    
    public RequestCreator noFade() {
        noFade = true;
        return this;
    }
    
    public Bitmap get() throws IOException {
        // :( Parsing error. Please contact me.
    }
    
    public void fetch() {
        fetch(0x0);
    }
    
    public void fetch(Callback p1) {
        // :( Parsing error. Please contact me.
    }
    
    public void into(Target p1) {
        // :( Parsing error. Please contact me.
    }
    
    public void into(RemoteViews p1, int p2, int p3, Notification p4) {
        // :( Parsing error. Please contact me.
    }
    
    public void into(RemoteViews p1, int p2, int[] p3) {
        // :( Parsing error. Please contact me.
    }
    
    public void into(ImageView p1) {
        into(p1, 0x0);
    }
    
    public void into(ImageView p1, Callback p2) {
        // :( Parsing error. Please contact me.
    }
    
    private Drawable getPlaceholderDrawable() {
        if(placeholderResId != 0) {
            return picasso.context.getResources().getDrawable(placeholderResId);
        }
        return placeholderDrawable;
    }
    
    private Request createRequest(long p1) {
        nextId = nextId.getAndIncrement();
        data = data.build();
        data.id = nextId;
        data.started = p1;
        Picasso picasso = picasso.loggingEnabled;
        if(picasso != null) {
            Utils.log("Main", "created", data.plainId(), data.toString());
        }
        picasso = picasso.transformRequest(data);
        if(picasso != data) {
            picasso.id = nextId;
            picasso.started = p1;
            if(picasso != null) {
                Utils.log("Main", "changed", picasso.logId(), "into " + picasso);
            }
        }
        return picasso;
    }
    
    private void performRemoteViewInto(RemoteViewsAction p1) {
        if(MemoryPolicy.shouldReadFromMemoryCache(memoryPolicy)) {
            picasso = picasso.quickMemoryCacheCheck(p1.getKey());
            if(picasso != null) {
                p1.complete(picasso, Picasso.LoadedFrom.MEMORY);
            }
            return;
        }
        if(placeholderResId != 0) {
            p1.setImageResource(placeholderResId);
        }
        picasso.enqueueAndSubmit(p1);
    }
}
