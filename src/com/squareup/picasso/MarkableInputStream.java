/**
  * Generated by smali2java 1.0.0.558
  * Copyright (C) 2013 Hensence.com
  */

package com.squareup.picasso;

import java.io.InputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

final class MarkableInputStream extends InputStream {
    private static final int DEFAULT_BUFFER_SIZE = 0x1000;
    private final InputStream in;
    private long limit;
    private long offset;
    private long reset;
    private long defaultMark = -0x1;
    
    public MarkableInputStream(InputStream p1) {
        this(p1, 0x1000);
    }
    
    public MarkableInputStream(InputStream p1, int p2) {
        // :( Parsing error. Please contact me.
    }
    
    public void mark(int p1) {
        defaultMark = savePosition(p1);
    }
    
    public long savePosition(int p1) {
        offset += (long)p1;
        if(limit < offset) {
            setLimit(offset);
        }
        return offset;
    }
    
    private void setLimit(long p1) {
        // :( Parsing error. Please contact me.
    }
    
    public void reset() throws IOException {
        reset(defaultMark);
    }
    
    public void reset(long p1) throws IOException {
        if((offset > limit) || (p1 < reset)) {
            throw new IOException("Cannot reset");
        }
        in.reset();
        skip(reset, p1);
        offset = p1;
    }
    
    private void skip(long p1, long p2) throws IOException {
        while(p1 < p2) {
            in = in.skip((p2 - p1));
            if(in == 0x0) {
                if(read() == -0x1) {
                    break;
                }
                read() = 0x1;
            }
            p1 += in;
        }
    }
    
    public int read() throws IOException {
        in = in.read();
        if(in != -0x1) {
            offset = (offset + 0x1);
        }
        return in;
    }
    
    public int read(byte[] p1) throws IOException {
        in = in.read(p1);
        if(in != -0x1) {
            offset = (offset + (long)in);
        }
        return in;
    }
    
    public int read(byte[] p1, int p2, int p3) throws IOException {
        in = in.read(p1, p2, p3);
        if(in != -0x1) {
            offset = (offset + (long)in);
        }
        return in;
    }
    
    public long skip(long p1) throws IOException {
        in = in.skip(p1);
        offset = (offset + in);
        return in;
    }
    
    public int available() throws IOException {
        return in.available();
    }
    
    public void close() throws IOException {
        in.close();
    }
    
    public boolean markSupported() {
        return in.markSupported();
    }
}
