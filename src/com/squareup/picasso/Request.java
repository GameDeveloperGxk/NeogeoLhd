/**
  * Generated by smali2java 1.0.0.558
  * Copyright (C) 2013 Hensence.com
  */

package com.squareup.picasso;

import android.graphics.Bitmap;
import java.util.List;
import android.net.Uri;
import java.util.ArrayList;
import java.util.Collection;
import java.util.concurrent.TimeUnit;
import java.util.Collections;
import java.util.Iterator;

public final class Request {
    public final boolean centerCrop;
    public final boolean centerInside;
    public final Bitmap.Config config;
    public final boolean hasRotationPivot;
    int id;
    int networkPolicy;
    public final boolean onlyScaleDown;
    public final Picasso.Priority priority;
    public final int resourceId;
    public final float rotationDegrees;
    public final float rotationPivotX;
    public final float rotationPivotY;
    public final String stableKey;
    long started;
    public final int targetHeight;
    public final int targetWidth;
    public final List<Transformation> transformations;
    public final Uri uri;
    private static final long TOO_LONG_LOG = TimeUnit.SECONDS.toNanos(0x5);
    
    private Request(Uri p1, int p2, String p3, List<Transformation> p4, int p5, int p6, boolean p7, boolean p8, boolean p9, float p10, float p11, float p12, boolean p13, Bitmap.Config p14, Picasso.Priority p15) {
        uri = p1;
        resourceId = p2;
        stableKey = p3;
        if(p4 == null) {
            transformations = 0x0;
        } else {
            transformations = Collections.unmodifiableList(p4);
        }
        targetWidth = p5;
        targetHeight = p6;
        centerCrop = p7;
        centerInside = p8;
        onlyScaleDown = p9;
        rotationDegrees = p10;
        rotationPivotX = p11;
        rotationPivotY = p12;
        hasRotationPivot = p13;
        config = p14;
        priority = p15;
    }
    
    public String toString() {
        if(resourceId > 0) {
            ("Request{").append(resourceId);
        } else {
            ("Request{").append(uri);
        }
        if((transformations != null) && (!transformations.isEmpty())) {
            for(; transformations.iterator().hasNext(); localString1) {
                ("Request{").append(0x20).append(transformations.iterator().hasNext().key());
            }
        }
        if(stableKey != null) {
            ("Request{").append(" stableKey(").append(stableKey).append(0x29);
        }
        if(targetWidth > 0) {
            ("Request{").append(" resize(").append(targetWidth).append(0x2c).append(targetHeight).append(0x29);
        }
        if(centerCrop) {
            ("Request{").append(" centerCrop");
        }
        if(centerInside) {
            ("Request{").append(" centerInside");
        }
        if(rotationDegrees [cmp] 0x0 != null) {
            ("Request{").append(" rotation(").append(rotationDegrees);
            if(hasRotationPivot) {
                ("Request{").append(" @ ").append(rotationPivotX).append(0x2c).append(rotationPivotY);
            }
            ("Request{").append(0x29);
        }
        if(config != null) {
            ("Request{").append(0x20).append(config);
        }
        ("Request{").append(0x7d);
        return ("Request{").toString();
    }
    
    String logId() {
        System.nanoTime() -= started;
        if(System.nanoTime() > TOO_LONG_LOG) {
            return plainId() + '+' + TimeUnit.NANOSECONDS.toSeconds(System.nanoTime()) + 's';
        }
        return plainId() + '+' + TimeUnit.NANOSECONDS.toMillis(System.nanoTime()) + "ms";
    }
    
    String plainId() {
        return "[R" + id + ']';
    }
    
    String getName() {
        if(uri != null) {
            return String.valueOf(uri.getPath());
        }
        return Integer.toHexString(resourceId);
    }
    
    public boolean hasSize() {
        return targetHeight == 0 ? 0x1 : 0x0;
    }
    
    boolean needsTransformation() {
        // :( Parsing error. Please contact me.
    }
    
    boolean needsMatrixTransform() {
        // :( Parsing error. Please contact me.
    }
    
    boolean hasCustomTransformations() {
        return (transformations != null);
    }
    
    public Request.Builder buildUpon() {
        return new Request.Builder(this, 0x0);
    }
}
