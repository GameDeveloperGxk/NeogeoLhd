/**
  * Generated by smali2java 1.0.0.558
  * Copyright (C) 2013 Hensence.com
  */

package com.squareup.picasso;

import android.graphics.Bitmap;
import android.os.Handler;
import android.os.HandlerThread;
import android.os.Looper;
import android.os.Message;

class Stats {
    private static final int BITMAP_DECODE_FINISHED = 0x2;
    private static final int BITMAP_TRANSFORMED_FINISHED = 0x3;
    private static final int CACHE_HIT = 0x0;
    private static final int CACHE_MISS = 0x1;
    private static final int DOWNLOAD_FINISHED = 0x4;
    private static final String STATS_THREAD_NAME = "Picasso-Stats";
    long averageDownloadSize;
    long averageOriginalBitmapSize;
    long averageTransformedBitmapSize;
    final Cache cache;
    long cacheHits;
    long cacheMisses;
    int downloadCount;
    final Handler handler;
    int originalBitmapCount;
    final HandlerThread statsThread;
    long totalDownloadSize;
    long totalOriginalBitmapSize;
    long totalTransformedBitmapSize;
    int transformedBitmapCount;
    
    Stats(Cache p1) {
        cache = p1;
        statsThread = new HandlerThread("Picasso-Stats", 0xa);
        statsThread.start();
        Utils.flushStackLocalLeaks(statsThread.getLooper());
        handler = new Stats.StatsHandler(statsThread.getLooper(), this);
    }
    
    void dispatchBitmapDecoded(Bitmap p1) {
        processBitmap(p1, 0x2);
    }
    
    void dispatchBitmapTransformed(Bitmap p1) {
        processBitmap(p1, 0x3);
    }
    
    void dispatchDownloadFinished(long p1) {
        handler.sendMessage(handler.obtainMessage(0x4, Long.valueOf(p1)));
    }
    
    void dispatchCacheHit() {
        handler.sendEmptyMessage(0x0);
    }
    
    void dispatchCacheMiss() {
        handler.sendEmptyMessage(0x1);
    }
    
    void shutdown() {
        statsThread.quit();
    }
    
    void performCacheHit() {
        cacheHits = (cacheHits + 0x1);
    }
    
    void performCacheMiss() {
        cacheMisses = (cacheMisses + 0x1);
    }
    
    void performDownloadFinished(Long p1) {
        downloadCount = (downloadCount + 0x1);
        totalDownloadSize = (totalDownloadSize + p1.longValue());
        averageDownloadSize = getAverage(downloadCount, totalDownloadSize);
    }
    
    void performBitmapDecoded(long p1) {
        originalBitmapCount = (originalBitmapCount + 0x1);
        totalOriginalBitmapSize = (totalOriginalBitmapSize + p1);
        averageOriginalBitmapSize = getAverage(originalBitmapCount, totalOriginalBitmapSize);
    }
    
    void performBitmapTransformed(long p1) {
        transformedBitmapCount = (transformedBitmapCount + 0x1);
        totalTransformedBitmapSize = (totalTransformedBitmapSize + p1);
        averageTransformedBitmapSize = getAverage(originalBitmapCount, totalTransformedBitmapSize);
    }
    
    StatsSnapshot createSnapshot() {
        // :( Parsing error. Please contact me.
    }
    
    private void processBitmap(Bitmap p1, int p2) {
        // :( Parsing error. Please contact me.
    }
    
    private static long getAverage(int p1, long p2) {
        return (p2 / (long)p1);
    }
    
    class StatsHandler extends Handler {
        private final Stats stats;
        
        public StatsHandler(Looper p1, Stats p2) {
            super(p1);
            stats = p2;
        }
        
        public void handleMessage(Message p1) {
            switch(p1.what) {
                case 0:
                {
                    stats.performCacheHit();
                    return;
                }
                case 1:
                {
                    stats.performCacheMiss();
                    return;
                }
                case 2:
                {
                    stats.performBitmapDecoded((long)p1.arg1);
                    return;
                }
                case 3:
                {
                    stats.performBitmapTransformed((long)p1.arg1);
                    return;
                }
                case 4:
                {
                    stats.performDownloadFinished((Long)p1.obj);
                    return;
                }
            }
            Picasso.HANDLER.post(new Runnable(this, p1) {
                
                public void run() {
                    throw new AssertionError("Unhandled stats message." + msg.what);
                }
            });
        }
    }
}
