/**
  * Generated by smali2java 1.0.0.558
  * Copyright (C) 2013 Hensence.com
  */

package com.squareup.picasso;

import com.squareup.okhttp.OkHttpClient;
import android.content.Context;
import java.io.File;
import java.io.IOException;
import com.squareup.okhttp.Cache;
import java.util.concurrent.TimeUnit;
import android.net.Uri;
import com.squareup.okhttp.CacheControl;
import com.squareup.okhttp.Request;
import com.squareup.okhttp.Call;
import com.squareup.okhttp.Response;
import com.squareup.okhttp.ResponseBody;
import java.io.InputStream;

public class OkHttpDownloader implements Downloader {
    private final OkHttpClient client;
    
    private static OkHttpClient defaultOkHttpClient() {
        OkHttpClient localOkHttpClient1 = new OkHttpClient();
        localOkHttpClient1.setConnectTimeout(0x3a98, TimeUnit.MILLISECONDS);
        localOkHttpClient1.setReadTimeout(0x4e20, TimeUnit.MILLISECONDS);
        localOkHttpClient1.setWriteTimeout(0x4e20, TimeUnit.MILLISECONDS);
        return localOkHttpClient1;
    }
    
    public OkHttpDownloader(Context p1) {
        this(Utils.createDefaultCacheDir(p1));
    }
    
    public OkHttpDownloader(File p1) {
        this(p1, Utils.calculateDiskCacheSize(p1));
    }
    
    public OkHttpDownloader(Context p1, long p2) {
        this(Utils.createDefaultCacheDir(p1), p2);
    }
    
    public OkHttpDownloader(File p1, long p2) {
        this(defaultOkHttpClient());
        try {
            client.setCache(new Cache(p1, p2));
            return;
        } catch(IOException localIOException1) {
        }
    }
    
    public OkHttpDownloader(OkHttpClient p1) {
        client = p1;
    }
    
    protected final OkHttpClient getClient() {
        return client;
    }
    
    public Downloader.Response load(Uri p1, int p2) throws IOException {
        Response localResponse1 = 0x0;
        if(p2 != 0) {
            if(NetworkPolicy.isOfflineOnly(p2)) {
            } else {
                CacheControl.Builder localCacheControl.Builder2 = new CacheControl.Builder();
                if(!NetworkPolicy.shouldReadFromDiskCache(p2)) {
                    localCacheControl.Builder3.noCache();
                } else if(!NetworkPolicy.shouldWriteToDiskCache(p2)) {
                    localCacheControl.Builder4.noStore();
                } else {
                    localCacheControl.Builder2 = localCacheControl.Builder2.build();
                }
            }
        }
        localRequest5 = new Request.Builder().url(p1.toString());
        if(localResponse1 != null) {
            new Request.Builder().cacheControl(localconst/46);
        }
        localRequest5 = client.newCall(new Request.Builder().build()).execute();
        localResponse1 = new Request.Builder().build().code();
        if(client.newCall(new Request.Builder().build()) >= 0x12c) {
            new Request.Builder().build().body().close();
            throw new Downloader.ResponseException(client.newCall(new Request.Builder().build()) + " " + new Request.Builder().build().message(), p2, client.newCall(new Request.Builder().build()));
        }
        new Request.Builder().build().cacheResponse() != null ? 0x1 : new Request.Builder().build().cacheResponse() != null ? 0x1 = 0x0;
        localRequest5 = new Request.Builder().build().body();
        new Downloader.Response(new Request.Builder().build().byteStream(), new Request.Builder().build().cacheResponse() != null ? 0x1 : new Request.Builder().build().cacheResponse() != null ? 0x1, new Request.Builder().build().contentLength());
        return localDownloader.Response7;
    }
    
    public void shutdown() {
        client = client.getCache();
        if(client != null) {
            try {
                client.close();
                return;
            } catch(IOException localIOException1) {
            }
        }
    }
}
