/**
  * Generated by smali2java 1.0.0.558
  * Copyright (C) 2013 Hensence.com
  */

package com.arcade.activity.simulator;

import android.os.AsyncTask;
import android.os.Handler;
import java.lang.ref.WeakReference;
import android.app.Activity;
import android.util.Log;
import android.opengl.GLSurfaceView;
import com.fbagamehjdt.ConFrimDialog;
import android.os.CountDownTimer;
import android.content.Context;
import android.widget.ImageView;
import android.app.ProgressDialog;
import com.fbagamehjdt.api.Util;
import java.util.ArrayList;
import java.io.IOException;
import android.content.res.Resources;
import com.fbagamehjdt.api.ResUtil;
import java.io.InputStream;
import java.io.BufferedOutputStream;
import java.io.FileOutputStream;
import java.io.OutputStream;
import android.os.Environment;
import java.io.File;
import android.widget.RelativeLayout;
import android.os.Message;
import android.os.Bundle;
import android.view.KeyEvent;
import java.io.PrintStream;
import android.view.Window;
import javax.microedition.khronos.opengles.GL10;
import javax.microedition.khronos.egl.EGLConfig;

public class BaseGameActivity extends BaseActivity implements GLSurfaceView.Renderer, ConFrimDialog.ConfirmDialogListener {
    private final String ASSETS_NES;
    private boolean File3;
    private boolean Fire2;
    private static final String INTARG1 = "intarg1";
    private static final String INTARG2 = "intarg2";
    private final String NEO_Name;
    private int ROM_SIZE;
    private static final String STRARG1 = "strarg1";
    private static final String STRARG2 = "strarg2";
    private int SurplusSDSize;
    private String TAG;
    private ConFrimDialog conFrimDialog;
    private CountDownTimer downTimer;
    private boolean isAutoFire;
    private boolean isFirstIn;
    private boolean isOut;
    private boolean ismove;
    int key;
    private Context mContext;
    private int mDrawHeight;
    private int mDrawWidth;
    protected Emulator mEmulator;
    protected GLSurfaceView mEmulatorView;
    private BaseGameActivity.KeyRunnable mKeyRunnable;
    private Thread mKeyThread;
    private int mLastWarKey;
    private ImageView mMask;
    private int mMiniHeight;
    private int mMiniWidth;
    private ProgressDialog mProgressDialog;
    private String mRomPath;
    private BaseGameActivity.BaseHandler mSimulatorHandler;
    private boolean mWait;
    private int requestedOrientation;
    
    public static native void GLESViewDraw(int p1, int p2, int p3);
    
    
    public static native void GLESViewResize(int p1, int p2);
    
    
    public static native void GLESViewStart();
    
    
    public BaseGameActivity() {
        TAG = "BaseGameActivity";
        mEmulator = 0x0;
        mEmulatorView = 0x0;
        isOut = false;
        requestedOrientation = -0x1;
        ASSETS_NES = "aof2.zip";
        NEO_Name = "neogeo.zip";
        mRomPath = "";
        ROM_SIZE = 0x6000;
        Fire2 = false;
        File3 = false;
        mWait = false;
        SurplusSDSize = 0x12c;
        isFirstIn = true;
        key = 0x0;
        ismove = false;
        mLastWarKey = 0x0;
        isAutoFire = false;
    }
    
    protected void onCreate(Bundle p1) {
        Log.i(TAG, "...............start game now................");
        System.out.print("...........start game now...................");
        setRequestedOrientation(0x0);
        mKeyThread = getWindow();
        requestWindowFeature(0x1);
        0x1 = 0x400;
        0x0.setFlags(0x1, 0x1);
        super.onCreate(p1);
        requestedOrientation = getRequestedOrientation();
        mContext = this;
        checkSDPath();
        init();
        conFrimDialog = new ConFrimDialog(this, this);
        mProgressDialog = new ProgressDialog(this);
        mProgressDialog.setTitle("\u6b63\u5728\u52a0\u8f7d\u6e38\u620f\u8d44\u6e90");
        mProgressDialog.show();
        copyFile();
        mKeyRunnable = new BaseGameActivity.KeyRunnable(this, 0x0);
        mKeyRunnable.b();
        mKeyThread = new Thread(mKeyRunnable);
        mKeyThread.start();
    }
    
    protected void onResume() {
        if(requestedOrientation != 0) {
            setRequestedOrientation(0x0);
            requestedOrientation = 0x0;
        }
        super.onResume();
    }
    
    private void checkSDPath() {
        // :( Parsing error. Please contact me.
    }
    
    class KeyRunnable implements Runnable {
        private Boolean b;
        
        private KeyRunnable(BaseGameActivity p1) {
            b = Boolean.valueOf(false);
        }
        
        public boolean a() {
            synchronized(b) {
                return b.booleanValue();
            }
        }
        
        public void b() {
            synchronized(b) {
                b = Boolean.valueOf(true);
            }
        }
        
        public void c() {
            synchronized(b) {
                b = Boolean.valueOf(false);
            }
        }
        
        public void run() {
            // :( Parsing error. Please contact me.
        }
    }
    
    private void copyFile() {
        BaseGameActivity.1 localBaseGameActivity.11 = new BaseGameActivity.BaseAsyncTask(this) {
            
            1(BaseGameActivity p1) {
                super(p1);
            }
            
            protected String doInBackground(String[] p1) {
                File localString1 = new File(mRomPath);
                if(!localString1.exists()) {
                    Log.i(TAG, "copy game");
                    localboolean2.mkdir();
                    File localboolean2 = new File(mRomPath + "aof2.zip");
                    if(!localboolean2.exists()) {
                    }
                } else {
                    File localboolean3 = new File(mRomPath + "aof2.zip");
                    if(!localboolean3.exists()) {
                    }
                }
                File localString1 = new File(mRomPath);
                if(!localString1.exists()) {
                    localboolean4.mkdir();
                    File localboolean4 = new File(mRomPath + "neogeo.zip");
                    if(!localboolean4.exists()) {
                    }
                } else {
                    File localString1 = new File(mRomPath + "neogeo.zip");
                    if(!localString1.exists()) {
                    }
                }
                return "";
            }
            
            protected void onPostExecute(String p1) {
                Log.i(TAG, "start game");
                mProgressDialog.dismiss();
            }
        };
        0x1 = {
            localBaseGameActivity.11.execute(0x1""});
        }
        
        private void deleteOtherRom(String p1) {
            File localFile1 = new File(p1);
            if(localFile1.isDirectory()) {
                localboolean2 = localFile1.listFiles();
                for(File  = 0x0; 0x0 < localFile1.isDirectory().length; 0x0 = 0x0 + 0x1) {
                    localFile1.isDirectory().length = localFile1.isDirectory()[0x0];
                    localint3.delete();
                }
            }
        }
        
        private boolean copyApk(int p1, String p2, String p3) {
            // :( Parsing error. Please contact me.
        }
        
        public void onConfirm() {
            isOut = true;
            recycleEmulator();
        }
        
        protected void recycleEmulator() {
            BaseGameActivity.2 localBaseGameActivity.21 = new BaseGameActivity.BaseAsyncTask(this) {
                
                2(BaseGameActivity p1) {
                    super(p1);
                }
                
                protected String doInBackground(String[] p1) {
                    if(a.mEmulator != null) {
                        a.mEmulator.EmuFinish();
                    }
                    return "";
                }
                
                protected void onPostExecute(String p1) {
                    a.finish();
                }
            };
            0x1 = {
                localBaseGameActivity.21.execute(0x1""});
            }
            
            public void onCancel() {
                isOut = false;
            }
            
            private void init() {
                // :( Parsing error. Please contact me.
            }
            
            protected void onDestroy() {
                if(downTimer != null) {
                    downTimer.cancel();
                    downTimer = 0x0;
                }
                super.onDestroy();
            }
            
            private String getEmulatorEngine() {
                return "fba";
            }
            
            public void onWindowFocusChanged(boolean p1) {
                super.onWindowFocusChanged(p1);
                if(p1) {
                    mEmulator.setOption("EMUPAUSED", false);
                    Log.i(TAG, "resume..");
                    return;
                }
                mEmulator.setOption("EMUPAUSED", true);
                Log.i(TAG, "pause..");
            }
            
            public void onSurfaceCreated(GL10 p1, EGLConfig p2) {
                Log.i(TAG, "onSurfaceCreated\u3002\u3002\u3002");
                GLESViewStart();
            }
            
            public void onSurfaceChanged(GL10 p1, int p2, int p3) {
                mDrawWidth = p2;
                mDrawHeight = p3;
                GLESViewResize(p2, p3);
            }
            
            public void onDrawFrame(GL10 p1) {
                GLESViewDraw(0x2, mMiniWidth, mMiniHeight);
            }
            
            private void startGame() {
                // :( Parsing error. Please contact me.
            }
            
            public static String createSavePath(int p1) {
                localStringBuilder1 = Environment.getExternalStorageDirectory().getPath() + File.separator + "arcade" + File.separator + "save" + File.separator + "" + p1 + File.separator;
                File localFile2 = new File(Environment.getExternalStorageDirectory().getPath() + File.separator + "arcade" + File.separator + "save" + File.separator + "" + p1 + File.separator);
                if(!localFile2.exists()) {
                    localFile2.mkdirs();
                }
                return Environment.getExternalStorageDirectory().getPath() + File.separator + "arcade" + File.separator + "save" + File.separator + "" + p1 + File.separator;
            }
            
            protected void startEmulator(String p1, int p2, int p3, int p4, boolean p5, boolean p6, String p7, int p8, String p9, int p10, int p11, String p12, String p13) {
                int localconst/41 = 0x0;
                if(p5) {
                    const/4 localconst/42 = 0x1;
                }
                int localconst/43 = 0x0;
                if(p6) {
                    const/4 localconst/43 = 0x2;
                }
                mEmulator.setOption("EMUSHOW", true);
                mEmulator.setEmuAllArg(p1, p2, p3, p4, 0x0, localconst/41, localconst/43, p7, p8, p9, p10, p11, p12, p13);
                mEmulator.EmuStart();
            }
            
            public void updateOption(int p1, int p2, String p3, String p4, int p5, int p6) {
                sendMessage(p1, p2, p3, p4, p5, p6);
            }
            
            private void sendMessage(int p1, int p2, String p3, String p4, int p5, int p6) {
                if(mSimulatorHandler != null) {
                    mSimulatorHandler = Message.obtain();
                    mSimulatorHandler.arg1 = p1;
                    mSimulatorHandler.arg2 = p2;
                    Bundle mSimulatorHandler = new Bundle();
                    mSimulatorHandler.putString("strarg1", p3);
                    mSimulatorHandler.putString("strarg2", p4);
                    mSimulatorHandler.putInt("intarg1", p5);
                    mSimulatorHandler.putInt("intarg2", p6);
                    mSimulatorHandler.setData(mSimulatorHandler);
                    mSimulatorHandler.sendMessage(mSimulatorHandler);
                }
            }
            
            public boolean dispatchKeyEvent(KeyEvent p1) {
                Log.i(TAG, "keycode=" + p1.getKeyCode());
                if((p1.getKeyCode() == 0x4) || (p1.getKeyCode() == 0x6f)) {
                    if((p1.getAction() == 0) && (conFrimDialog != null) && (!isOut)) {
                        conFrimDialog.show();
                    }
                    return super.dispatchKeyEvent(p1);
                }
                if(p1.getAction() == 0) {
                    if(p1.getRepeatCount() == 0) {
                        ismove = true;
                        if(p1.getKeyCode() == 0x14) {
                            mLastWarKey = 0x4;
                            key = key;
                            mEmulator.nativeSetKeyStates(key);
                            return true;
                        }
                        if(p1.getKeyCode() == 0x13) {
                            mLastWarKey = 0x3;
                            key = key;
                            mEmulator.nativeSetKeyStates(key);
                            return true;
                        }
                        if(p1.getKeyCode() == 0x15) {
                            mLastWarKey = 0x1;
                            key = key;
                            mEmulator.nativeSetKeyStates(key);
                            return true;
                        }
                        if(p1.getKeyCode() == 0x16) {
                            mLastWarKey = 0x2;
                            key = key;
                            mEmulator.nativeSetKeyStates(key);
                            return true;
                        }
                        if((p1.getKeyCode() == 0x8) || (p1.getKeyCode() == 0x66)) {
                            isAutoFire = !isAutoFire ? 0x1 : !isAutoFire ? 0x1;
                            return true;
                        }
                        if(p1.getKeyCode() == 0x9) {
                            key = key;
                            mEmulator.nativeSetKeyStates(key);
                            return true;
                        }
                        if(p1.getKeyCode() == 0x17) {
                            Fire2 = true;
                            return true;
                        }
                        if(p1.getKeyCode() == 0x6d) {
                            key = key;
                            mEmulator.nativeSetKeyStates(key);
                            return true;
                        }
                        if(p1.getKeyCode() == 0x6c) {
                            key = key;
                            mEmulator.nativeSetKeyStates(key);
                            return true;
                        }
                        if(p1.getKeyCode() == 0x60) {
                            key = key;
                            mEmulator.nativeSetKeyStates(key);
                            return true;
                        }
                        if(p1.getKeyCode() == 0x61) {
                            mWait = true;
                            key = key;
                            mEmulator.nativeSetKeyStates(key);
                            return true;
                        }
                        if(p1.getKeyCode() == 0x63) {
                            key = key;
                            mEmulator.nativeSetKeyStates(key);
                            return true;
                        }
                        if(p1.getKeyCode() == 0x64) {
                            key = key;
                            mEmulator.nativeSetKeyStates(key);
                            return true;
                        }
                        if(p1.getKeyCode() == 0x69) {
                            Fire2 = true;
                            return true;
                        }
                        if(p1.getKeyCode() == 0x67) {
                            File3 = true;
                            return true;
                        }
                        if(p1.getKeyCode() == 0x26) {
                            key = key;
                            mEmulator.nativeSetKeyStates(key);
                            return true;
                        }
                        if(p1.getKeyCode() == 0xa) {
                            File3 = true;
                            return true;
                        }
                        if(p1.getKeyCode() == 0xd) {
                            key = key;
                            mEmulator.nativeSetKeyStates(key);
                            return true;
                        }
                        if(p1.getKeyCode() == 0x10) {
                            key = key;
                            mEmulator.nativeSetKeyStates(key);
                            return true;
                        }
                        if(p1.getKeyCode() == 0xe) {
                            key = key;
                            mEmulator.nativeSetKeyStates(key);
                            return true;
                        }
                        if(p1.getKeyCode() == 0xf) {
                            mWait = true;
                            key = key;
                            mEmulator.nativeSetKeyStates(key);
                            return true;
                        }
                        if(p1.getKeyCode() == 0xb) {
                            key = key;
                            mEmulator.nativeSetKeyStates(key);
                            return true;
                        }
                        if(p1.getKeyCode() == 0xc) {
                            key = key;
                            mEmulator.nativeSetKeyStates(key);
                            return true;
                        }
                        return super.dispatchKeyEvent(p1);
                    }
                }
                if(p1.getAction() == 0x1) {
                    ismove = false;
                    if(p1.getKeyCode() == 0x14) {
                        key = (key & -0x9);
                        mEmulator.nativeSetKeyStates(key);
                        return true;
                    }
                    if(p1.getKeyCode() == 0x13) {
                        key = (key & -0x5);
                        mEmulator.nativeSetKeyStates(key);
                        return true;
                    }
                    if(p1.getKeyCode() == 0x15) {
                        key = (key & -0x3);
                        mEmulator.nativeSetKeyStates(key);
                        return true;
                    }
                    if(p1.getKeyCode() == 0x16) {
                        key = (key & -0x2);
                        mEmulator.nativeSetKeyStates(key);
                        return true;
                    }
                    if(p1.getKeyCode() == 0x6d) {
                        key = (key & -0x11);
                        mEmulator.nativeSetKeyStates(key);
                        return true;
                    }
                    if(p1.getKeyCode() == 0x6c) {
                        key = (key & -0x21);
                        mEmulator.nativeSetKeyStates(key);
                        return true;
                    }
                    if(p1.getKeyCode() == 0x9) {
                        key = (key & -0x101);
                        mEmulator.nativeSetKeyStates(key);
                        return true;
                    }
                    if(p1.getKeyCode() == 0x60) {
                        key = (key & -0x41);
                        mEmulator.nativeSetKeyStates(key);
                        return true;
                    }
                    if(p1.getKeyCode() == 0x61) {
                        key = (key & -0x81);
                        mEmulator.nativeSetKeyStates(key);
                        mWait = false;
                        return true;
                    }
                    if(p1.getKeyCode() == 0x63) {
                        key = (key & -0x101);
                        mEmulator.nativeSetKeyStates(key);
                        return true;
                    }
                    if(p1.getKeyCode() == 0x64) {
                        key = (key & -0x201);
                        mEmulator.nativeSetKeyStates(key);
                        return true;
                    }
                    if(p1.getKeyCode() == 0x26) {
                        key = (key & -0x41);
                        mEmulator.nativeSetKeyStates(key);
                        return true;
                    }
                    if(p1.getKeyCode() == 0xd) {
                        key = (key & -0x11);
                        mEmulator.nativeSetKeyStates(key);
                        return true;
                    }
                    if(p1.getKeyCode() == 0x10) {
                        key = (key & -0x21);
                        mEmulator.nativeSetKeyStates(key);
                        return true;
                    }
                    if(p1.getKeyCode() == 0xe) {
                        key = (key & -0x41);
                        mEmulator.nativeSetKeyStates(key);
                        return true;
                    }
                    if(p1.getKeyCode() == 0xf) {
                        key = (key & -0x81);
                        mEmulator.nativeSetKeyStates(key);
                        mWait = false;
                        return true;
                    }
                    if(p1.getKeyCode() == 0xb) {
                        key = (key & -0x101);
                        mEmulator.nativeSetKeyStates(key);
                        return true;
                    }
                    if(p1.getKeyCode() == 0xc) {
                        key = (key & -0x201);
                        mEmulator.nativeSetKeyStates(key);
                        return true;
                    }
                    return super.dispatchKeyEvent(p1);
                }
                localconst/41 = super.dispatchKeyEvent(p1);
                return true;
            }
        }
        