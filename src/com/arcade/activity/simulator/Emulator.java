/**
  * Generated by smali2java 1.0.0.558
  * Copyright (C) 2013 Hensence.com
  */

package com.arcade.activity.simulator;

import android.content.Context;

public class Emulator implements Runnable {
    public static final int AUTO_FIGHT = 0x40;
    public static final int GAMEPAD_A = 0x40;
    public static final int GAMEPAD_AB = 0xc0;
    public static final int GAMEPAD_ABC = 0x1c0;
    public static final int GAMEPAD_ABCD = 0x3c0;
    public static final int GAMEPAD_B = 0x80;
    public static final int GAMEPAD_C = 0x100;
    public static final int GAMEPAD_CD = 0x300;
    public static final int GAMEPAD_D = 0x200;
    public static final int GAMEPAD_DOWN = 0x8;
    public static final int GAMEPAD_DOWN_LEFT = 0xa;
    public static final int GAMEPAD_DOWN_RIGHT = 0x9;
    public static final int GAMEPAD_LEFT = 0x2;
    public static final int GAMEPAD_LEFT_B = 0x82;
    public static final int GAMEPAD_RIGHT = 0x1;
    public static final int GAMEPAD_RIGHT_B = 0x81;
    public static final int GAMEPAD_SELECT = 0x10;
    public static final int GAMEPAD_START = 0x20;
    public static final int GAMEPAD_TL = 0x400;
    public static final int GAMEPAD_TL2 = 0x10;
    public static final int GAMEPAD_TR = 0x800;
    public static final int GAMEPAD_TR2 = 0x20;
    public static final int GAMEPAD_UP = 0x4;
    public static final int GAMEPAD_UP_LEFT = 0x6;
    public static final int GAMEPAD_UP_RIGHT = 0x5;
    private static Emulator emulator;
    private static String engineLib;
    public static final int[] gameKeys;
    private Thread thread;
    public static final int[] umidoKeys;
    
    private native void nativeEmuFinish();
    
    
    private native void nativeEmuStart(String p1, int p2, int p3, int p4, int p5, int p6, int p7, String p8, int p9, String p10, int p11, int p12, String p13, String p14);
    
    
    public native void nativeEmuPause();
    
    
    public native void nativeEmuResume();
    
    
    public native int nativeGetVideoHeight();
    
    
    public native int nativeGetVideoWidth();
    
    
    public native void nativeSetKeyStates(int p1);
    
    
    public native void nativeSetOption(String p1, String p2);
    
    
    void constructor <clinit>() {
        // :( Parsing error. Please contact me.
    }
    private String GAMEROMPATH = "";
    private int HOSTFLAG = 0x1;
    private int GAMEID = 0x0;
    private int ROOMID = 0x0;
    private int USERID = 0x457;
    private int GAMEMODE = 0x0;
    private int RECREPMODE = 0x0;
    private String RECREPPATH = "";
    private int WATCHARGS = 0x0;
    private String RESETSTATE = "";
    private int SERVERFLAG = 0x1;
    private int USERCMODE = 0x0;
    private String SERVERIP = "45.126.123.135";
    private String VIPIP = "45.126.123.135";
    
    public static Emulator createInstance(Context p1, String p2) {
        if(emulator == null) {
            System.loadLibrary("fba");
        }
        emulator = new Emulator();
        return emulator;
    }
    
    public static Emulator getInstance() {
        return emulator;
    }
    
    private Emulator() {
    }
    
    public void EmuStart() {
        Thread localThread1 = new Thread(this);
        localThread1.setPriority(0xa);
        localThread1.start();
    }
    
    public final void EmuFinish() {
        nativeEmuFinish();
    }
    
    public void setGAMEROMPATH(String p1) {
        GAMEROMPATH = p1;
    }
    
    public void setHOSTFLAG(int p1) {
        HOSTFLAG = p1;
    }
    
    public void setGAMEID(int p1) {
        GAMEID = p1;
    }
    
    public void setROOMID(int p1) {
        ROOMID = p1;
    }
    
    public void setUSERID(int p1) {
        USERID = p1;
    }
    
    public void setGAMEMODE(int p1) {
        GAMEMODE = p1;
    }
    
    public void setRECREPMODE(int p1) {
        RECREPMODE = p1;
    }
    
    public void setRECREPPATH(String p1) {
        RECREPPATH = p1;
    }
    
    public void setWATCHARGS(int p1) {
        WATCHARGS = p1;
    }
    
    public void setRESETSTATE(String p1) {
        RESETSTATE = p1;
    }
    
    public void setSERVERFLAG(int p1) {
        SERVERFLAG = p1;
    }
    
    public void setUSERCMODE(int p1) {
        USERCMODE = p1;
    }
    
    public void setSERVERIP(String p1) {
        SERVERIP = p1;
    }
    
    public void setVIPIP(String p1) {
        VIPIP = p1;
    }
    
    public void setEmuAllArg(String p1, int p2, int p3, int p4, int p5, int p6, int p7, String p8, int p9, String p10, int p11, int p12, String p13, String p14) {
        GAMEROMPATH = p1;
        HOSTFLAG = p2;
        GAMEID = p3;
        ROOMID = p4;
        USERID = p5;
        GAMEMODE = p6;
        RECREPMODE = p7;
        RECREPPATH = p8;
        WATCHARGS = p9;
        RESETSTATE = p10;
        SERVERFLAG = p11;
        USERCMODE = p12;
        SERVERIP = p13;
        VIPIP = p14;
    }
    
    public void setOption(String p1, boolean p2) {
        nativeSetOption(p1, "false");
    }
    
    public void setOption(String p1, int p2) {
        nativeSetOption(p1, Integer.toString(p2));
    }
    
    public void run() {
        // :( Parsing error. Please contact me.
    }
}
