/**
  * Generated by smali2java 1.0.0.558
  * Copyright (C) 2013 Hensence.com
  */

package com.fbagamehjdt.api;

import android.widget.Toast;
import android.content.Context;
import android.content.res.Resources;
import android.util.Log;
import android.text.SpannableStringBuilder;
import android.text.style.ForegroundColorSpan;
import android.text.style.AbsoluteSizeSpan;
import android.os.Environment;
import java.io.File;
import android.content.SharedPreferences;
import android.app.Activity;
import android.view.Window;
import android.util.DisplayMetrics;
import android.view.WindowManager;
import android.view.Display;
import android.content.pm.PackageManager;
import android.os.StatFs;
import android.os.Build;
import java.io.DataOutputStream;
import java.io.OutputStream;
import android.content.Intent;
import android.net.Uri;
import android.net.ConnectivityManager;
import android.net.NetworkInfo;
import android.text.TextUtils;
import android.support.v4.content.FileProvider;
import java.util.ArrayList;
import android.os.storage.StorageManager;
import java.lang.reflect.Method;
import java.util.Iterator;

public class Util {
    private static final String f = "Util";
    private static final float g = 1920.0f;
    private static final float h = 1080.0f;
    private static int l;
    private static int m;
    private static Toast o;
    pri = 0x3f80;
    private static int j = 0x0;
    private static int k = 0x0;
    private static boolean = 0x0;
    
    public static void a(Context p1) {
        if(n) {
            return;
        }
        DisplayMetrics localDisplayMetrics1 = new DisplayMetrics();
        localString2 = (WindowManager)getSystemService("window");
        localString2 = "window".getDefaultDisplay();
        "window".getRealMetrics(localDisplayMetrics1);
        String localString2 = localDisplayMetrics1.widthPixels;
        DisplayMetrics localDisplayMetrics1 = localDisplayMetrics1.heightPixels;
        if("window" < localDisplayMetrics1) {
            l = localDisplayMetrics3;
            m = "window";
            1920.0f = (float)localDisplayMetrics3 / 1920.0f;
            1080.0f = (float)"window" / 1080.0f;
            i = localfloat4 <= localfloat5 ? localfloat4 <= localfloat5 ?  : ;
            if((i == localfloat4) && (i [cmp] localfloat5 != null)) {
                k = (int)(((float)"window" * (localfloat6 - i)) / 2.0f);
            } else if((i == localfloat5) && (i [cmp] localfloat4 != null)) {
                j = (int)(((localfloat4 - i) * (float)localDisplayMetrics3) / 2.0f);
            }
        } else {
            "window" = ;
        }
        n = 0x1;
    }
    
    public static int a(Context p1, String p2) {
        // :( Parsing error. Please contact me.
    }
    
    public static int a(int p1) {
        return (int)(i * (float)p1);
    }
    
    public static int b(Context p1, String p2) {
        // :( Parsing error. Please contact me.
    }
    
    public static int b(int p1) {
        return ((int)((float)p1 * i) + j);
    }
    
    public static int c(Context p1, String p2) {
        // :( Parsing error. Please contact me.
    }
    
    public static int c(int p1) {
        return ((int)((float)p1 * i) + k);
    }
    
    public static int a() {
        return l;
    }
    
    public static int b() {
        return m;
    }
    
    public static void a(Activity p1) {
        getWindow().setFlags(0x400, 0x400);
    }
    
    public static void d(Context p1, String p2) {
        if(o == null) {
            o = Toast.makeText(p1, p2, 0x0);
        } else {
            o.setText(p2);
        }
        o.show();
    }
    
    public static int d(int p1) {
        switch(p1) {
            case -1:
            case 0:
            case 1:
            {
                int localconst/41 = -0x1;
                return localconst/41;
            }
            case 2:
            {
                int localconst2 = -0xf33994;
                return localconst2;
            }
            case 3:
            {
                int localconst3 = -0xe97201;
                return localconst3;
            }
            case 4:
            {
                int localconst4 = -0x159f01;
                return localconst4;
            }
            case 5:
            {
                int localconst/165 = -0x4600;
                return localconst/165;
            }
        }
        int localconst6 = -0xd9d0;
        return localconst6;
    }
    
    public static String a(Context p1, int p2, String p3) {
        localStringBuilder1 = getExternalFilesDir(0x0).getAbsolutePath() + File.separator + "roms" + File.separator;
        localStringBuilder1 = getExternalFilesDir(0x0).getAbsolutePath() + File.separator + "roms" + File.separator + p2 + p3.substring(p3.lastIndexOf("."));
        return getExternalFilesDir(0x0).getAbsolutePath() + File.separator + "roms" + File.separator + p2 + p3.substring(p3.lastIndexOf("."));
    }
    
    public static int a(String[] p1) {
        try {
            localRuntime1 = Runtime.getRuntime().exec(p1);
            localRuntime1 = Runtime.getRuntime().exitValue();
            Log.i("Util", "---------------result" + Runtime.getRuntime());
            return Runtime.getRuntime();
        } catch(Exception localException2) {
            localException2.printStackTrace();
        }
        return -0x1;
    }
    
    public static boolean c() {
        0x2 = {
            localconst/41 = a(0x2"ls", "-l"});
            boolean localconst/42 = 0x2"ls", "-l"} == null;
            return false;
        }
        
        public static boolean d() {
            // :( Parsing error. Please contact me.
        }
        
        public static String a(int p1, String p2) {
            localString1 = p2.substring(p2.lastIndexOf("."));
            localStringBuilder2 = Environment.getExternalStorageDirectory().getPath() + File.separator + "arcade" + File.separator + "rom" + File.separator;
            File localStringBuilder3 = new File(Environment.getExternalStorageDirectory().getPath() + File.separator + "arcade" + File.separator + "rom" + File.separator);
            if(!localStringBuilder3.exists()) {
                localFile4.mkdirs();
            }
            if(p1 == 0x3) {
                if(p2.lastIndexOf(".").equals(".fba")) {
                    return Environment.getExternalStorageDirectory().getPath() + File.separator + "arcade" + File.separator + "rom" + File.separator + "0" + p2.lastIndexOf(".");
                }
            }
            return Environment.getExternalStorageDirectory().getPath() + File.separator + "arcade" + File.separator + "rom" + File.separator + p1 + p2.lastIndexOf(".");
        }
        
        public static String e(int p1) {
            localStringBuilder1 = Environment.getExternalStorageDirectory().getPath() + File.separator + "arcade" + File.separator + "save" + File.separator + "" + p1 + File.separator;
            File localFile2 = new File(Environment.getExternalStorageDirectory().getPath() + File.separator + "arcade" + File.separator + "save" + File.separator + "" + p1 + File.separator);
            if(!localFile2.exists()) {
                localFile2.mkdirs();
            }
            return Environment.getExternalStorageDirectory().getPath() + File.separator + "arcade" + File.separator + "save" + File.separator + "" + p1 + File.separator;
        }
        
        public static String a(String p1) {
            localString1 = "/system/rom/" + p1;
            if((p1 == "kof97") || (p1 == "mslug3") || (p1 == "samsho2") || (p1 == "sengoku3")) {
                return "/system/rom/" + p1 + ".fba";
            }
            return "/system/rom/" + p1 + ".zip";
            return "/system/rom/" + p1 + ".zip";
        }
        
        public static String f(int p1) {
            if(p1 == 0x3) {
                p1 = 0x0;
            }
            localString1 = "/system/rom/" + p1;
            if((p1 != 0x2) && (p1 < 0xa)
             || (p1 == 0x34) || (p1 == 0x37)) {
                return "/system/rom/" + p1 + ".fba";
            }
            return "/system/rom/" + p1 + ".zip";
            return "/system/rom/" + p1 + ".zip";
        }
        
        public static String g(int p1) {
            localStringBuilder1 = "/system/rom/" + p1 + ".init";
            return "/system/rom/" + p1 + ".init";
        }
        
        public static String e() {
            localStringBuilder1 = Environment.getExternalStorageDirectory().getPath() + File.separator + "arcade" + File.separator + "save" + File.separator;
            return Environment.getExternalStorageDirectory().getPath() + File.separator + "arcade" + File.separator + "save" + File.separator;
        }
        
        public static String f() {
            localStringBuilder1 = Environment.getExternalStorageDirectory().getPath() + File.separator + "arcade" + File.separator + "save" + File.separator;
            return Environment.getExternalStorageDirectory().getPath() + File.separator + "arcade" + File.separator + "save" + File.separator;
        }
        
        public static String b(String p1) {
            localString1 = Environment.getExternalStorageDirectory().getPath() + File.separator + "arcade" + File.separator + "update" + File.separator;
            File localString2 = new File(Environment.getExternalStorageDirectory().getPath() + File.separator + "arcade" + File.separator + "update" + File.separator);
            if(!localString2.exists()) {
                localString2.mkdirs();
            }
            return Environment.getExternalStorageDirectory().getPath() + File.separator + "arcade" + File.separator + "update" + File.separator + p1 + ".apk";
        }
        
        public static int b(Context p1) {
            // :( Parsing error. Please contact me.
        }
        
        public static String c(Context p1) {
            // :( Parsing error. Please contact me.
        }
        
        public static void a(File p1) {
            // :( Parsing error. Please contact me.
        }
        
        public static String d(Context p1) {
            localStringBuilder1 = getExternalFilesDir(0x0).getAbsolutePath() + File.separator + "cover" + File.separator;
            File localFile2 = new File(getExternalFilesDir(0x0).getAbsolutePath() + File.separator + "cover" + File.separator);
            if(!localFile2.exists()) {
                localFile2.mkdirs();
            }
            return getExternalFilesDir(0x0).getAbsolutePath() + File.separator + "cover" + File.separator;
        }
        
        public static void b(Context p1, int p2, String p3) {
            localString1 = getSharedPreferences("cover", 0x0);
            localString1 = "cover".edit();
            "cover".putString("Path" + p2, p3);
            "cover".commit();
        }
        
        public static String a(Context p1, int p2) {
            localString1 = getSharedPreferences("cover", 0x0);
            return "cover".getString("Path" + p2, "");
        }
        
        public static void b(Context p1, int p2) {
            localString1 = getSharedPreferences("cover", 0x0);
            localString1 = "cover".edit();
            "cover".putInt("Count", p2);
            "cover".commit();
        }
        
        public static int e(Context p1) {
            localint1 = getSharedPreferences("cover", 0x0);
            return "cover".getInt("Count", 0x0);
        }
        
        public static SpannableStringBuilder a(String p1, String p2) {
            String localint1 = "/";
            SpannableStringBuilder localSpannableStringBuilder2 = new SpannableStringBuilder(p1 + "/" + p2);
            ForegroundColorSpan localForegroundColorSpan3 = new ForegroundColorSpan(-0xd68601);
            ForegroundColorSpan localForegroundColorSpan3 = new ForegroundColorSpan(-0x1);
            AbsoluteSizeSpan localint4 = new AbsoluteSizeSpan(a(0x8c));
            localSpannableStringBuilder2.setSpan(localint4, 0x0, length(), 0x21);
            localSpannableStringBuilder2.setSpan(localForegroundColorSpan3, length(), (("/".length() + length()) + p2.length()), 0x21);
            return localSpannableStringBuilder2;
        }
        
        public static boolean f(Context p1) {
            if(p1 != null) {
                String localString1 = "connectivity";
                localString1 = (ConnectivityManager)getSystemService("connectivity");
                localString1 = "connectivity".getActiveNetworkInfo();
                if("connectivity" != null) {
                    return "connectivity".isAvailable();
                }
            }
            return false;
        }
        
        public static boolean e(Context p1, String p2) {
            File localUri1 = new File(p2);
            Intent localIntent2 = new Intent("android.intent.action.INSTALL_PACKAGE_HIDE");
            localIntent2.setPackage("com.android.packageinstaller");
            localIntent2.setDataAndType(Uri.fromFile(localUri1), "application/vnd.android.package-archive");
            startService(localIntent2);
            return true;
        }
        
        public static boolean f(Context p1, String p2) {
            // :( Parsing error. Please contact me.
        }
        public sta = "/mnt/sdcard/gba.apk";
        pub = "/mnt/sdcard/snes.apk";
        public = "/mnt/sdcard/md.apk";
        public static String d = "/mnt/sdcard/nes.apk";
        public static String e = "/mnt/sdcard/0.init";
        
        public static boolean g(Context p1, String p2) {
            File localFile1 = new File(p2);
            Intent localIntent2 = new Intent("android.intent.action.VIEW");
            if(Build.VERSION.SDK_INT >= 0x18) {
                localIntent3.setFlags(0x1);
                localFile4 = FileProvider.getUriForFile(p1, Build.VERSION.SDK_INT, localFile4);
                Build.VERSION.SDK_INT = getPackageName();
                localIntent3.setDataAndType(localFile4, "application/vnd.android.package-archive");
            } else {
                localIntent2.setDataAndType(Uri.fromFile(localFile1), "application/vnd.android.package-archive");
                localIntent2.setFlags(0x10000000);
            }
            startActivity(localIntent2);
            return true;
        }
        
        public static String a(Long p1) {
            localString1 = Integer.valueOf(0x3e8);
            locallong2 = Integer.valueOf((0x3e8.intValue() * 0x3c));
            locallong3 = Integer.valueOf(((0x3e8.intValue() * 0x3c).intValue() * 0x3c));
            localint4 = Integer.valueOf((((0x3e8.intValue() * 0x3c).intValue() * 0x3c).intValue() * 0x18));
            locallong5 = Long.valueOf((longValue() / (long)(((0x3e8.intValue() * 0x3c).intValue() * 0x3c).intValue() * 0x18).intValue()));
            localint6 = Long.valueOf(((longValue() - ((longValue() / (long)(((0x3e8.intValue() * 0x3c).intValue() * 0x3c).intValue() * 0x18).intValue()).longValue() * (long)(((0x3e8.intValue() * 0x3c).intValue() * 0x3c).intValue() * 0x18).intValue())) / (long)((0x3e8.intValue() * 0x3c).intValue() * 0x3c).intValue()));
            locallong7 = Long.valueOf((((longValue() - ((longValue() / (long)(((0x3e8.intValue() * 0x3c).intValue() * 0x3c).intValue() * 0x18).intValue()).longValue() * (long)(((0x3e8.intValue() * 0x3c).intValue() * 0x3c).intValue() * 0x18).intValue())) - (((0x3e8.intValue() * 0x3c).intValue() * 0x3c).intValue().longValue() * (long)((0x3e8.intValue() * 0x3c).intValue() * 0x3c).intValue())) / (long)(0x3e8.intValue() * 0x3c).intValue()));
            localint8 = Long.valueOf(((((longValue() - ((longValue() / (long)(((0x3e8.intValue() * 0x3c).intValue() * 0x3c).intValue() * 0x18).intValue()).longValue() * (long)(((0x3e8.intValue() * 0x3c).intValue() * 0x3c).intValue() * 0x18).intValue())) - (((0x3e8.intValue() * 0x3c).intValue() * 0x3c).intValue().longValue() * (long)((0x3e8.intValue() * 0x3c).intValue() * 0x3c).intValue())) - ((((longValue() - ((longValue() / (long)(((0x3e8.intValue() * 0x3c).intValue() * 0x3c).intValue() * 0x18).intValue()).longValue() * (long)(((0x3e8.intValue() * 0x3c).intValue() * 0x3c).intValue() * 0x18).intValue())) - (((0x3e8.intValue() * 0x3c).intValue() * 0x3c).intValue().longValue() * (long)((0x3e8.intValue() * 0x3c).intValue() * 0x3c).intValue())) / (long)(0x3e8.intValue() * 0x3c).intValue()).longValue() * (long)(0x3e8.intValue() * 0x3c).intValue())) / (long)0x3e8.intValue()));
            Long.valueOf(((((longValue() - ((longValue() / (long)(((0x3e8.intValue() * 0x3c).intValue() * 0x3c).intValue() * 0x18).intValue()).longValue() * (long)(((0x3e8.intValue() * 0x3c).intValue() * 0x3c).intValue() * 0x18).intValue())) - ((long)((0x3e8.intValue() * 0x3c).intValue() * 0x3c).intValue() * ((0x3e8.intValue() * 0x3c).intValue() * 0x3c).intValue().longValue())) - ((((longValue() - ((longValue() / (long)(((0x3e8.intValue() * 0x3c).intValue() * 0x3c).intValue() * 0x18).intValue()).longValue() * (long)(((0x3e8.intValue() * 0x3c).intValue() * 0x3c).intValue() * 0x18).intValue())) - (((0x3e8.intValue() * 0x3c).intValue() * 0x3c).intValue().longValue() * (long)((0x3e8.intValue() * 0x3c).intValue() * 0x3c).intValue())) / (long)(0x3e8.intValue() * 0x3c).intValue()).longValue() * (long)(0x3e8.intValue() * 0x3c).intValue())) - ((long)0x3e8.intValue() * 0x3e8.intValue().longValue())));
            StringBuffer localString1 = new StringBuffer();
            if(((0x3e8.intValue() * 0x3c).intValue() * 0x3c).intValue().longValue() >= 0xa) {
                localStringBuffer9.append(((0x3e8.intValue() * 0x3c).intValue() * 0x3c).intValue() + ":");
            } else if((((0x3e8.intValue() * 0x3c).intValue() * 0x3c).intValue().longValue() > 0x0) && (((0x3e8.intValue() * 0x3c).intValue() * 0x3c).intValue().longValue() < 0xa)) {
                localStringBuffer10.append("0" + ((0x3e8.intValue() * 0x3c).intValue() * 0x3c).intValue() + ":");
            } else if(((0x3e8.intValue() * 0x3c).intValue() * 0x3c).intValue().longValue() <= 0x0) {
                localStringBuffer11.append("00:");
            }
            if((((longValue() - ((longValue() / (long)(((0x3e8.intValue() * 0x3c).intValue() * 0x3c).intValue() * 0x18).intValue()).longValue() * (long)(((0x3e8.intValue() * 0x3c).intValue() * 0x3c).intValue() * 0x18).intValue())) - (((0x3e8.intValue() * 0x3c).intValue() * 0x3c).intValue().longValue() * (long)((0x3e8.intValue() * 0x3c).intValue() * 0x3c).intValue())) / (long)(0x3e8.intValue() * 0x3c).intValue()).longValue() >= 0xa) {
                localStringBuffer12.append((((longValue() - ((longValue() / (long)(((0x3e8.intValue() * 0x3c).intValue() * 0x3c).intValue() * 0x18).intValue()).longValue() * (long)(((0x3e8.intValue() * 0x3c).intValue() * 0x3c).intValue() * 0x18).intValue())) - (((0x3e8.intValue() * 0x3c).intValue() * 0x3c).intValue().longValue() * (long)((0x3e8.intValue() * 0x3c).intValue() * 0x3c).intValue())) / (long)(0x3e8.intValue() * 0x3c).intValue()) + ":");
            } else if(((((longValue() - ((longValue() / (long)(((0x3e8.intValue() * 0x3c).intValue() * 0x3c).intValue() * 0x18).intValue()).longValue() * (long)(((0x3e8.intValue() * 0x3c).intValue() * 0x3c).intValue() * 0x18).intValue())) - (((0x3e8.intValue() * 0x3c).intValue() * 0x3c).intValue().longValue() * (long)((0x3e8.intValue() * 0x3c).intValue() * 0x3c).intValue())) / (long)(0x3e8.intValue() * 0x3c).intValue()).longValue() > 0x0) && ((((longValue() - ((longValue() / (long)(((0x3e8.intValue() * 0x3c).intValue() * 0x3c).intValue() * 0x18).intValue()).longValue() * (long)(((0x3e8.intValue() * 0x3c).intValue() * 0x3c).intValue() * 0x18).intValue())) - (((0x3e8.intValue() * 0x3c).intValue() * 0x3c).intValue().longValue() * (long)((0x3e8.intValue() * 0x3c).intValue() * 0x3c).intValue())) / (long)(0x3e8.intValue() * 0x3c).intValue()).longValue() < 0xa)) {
                localStringBuffer13.append("0" + (((longValue() - ((longValue() / (long)(((0x3e8.intValue() * 0x3c).intValue() * 0x3c).intValue() * 0x18).intValue()).longValue() * (long)(((0x3e8.intValue() * 0x3c).intValue() * 0x3c).intValue() * 0x18).intValue())) - (((0x3e8.intValue() * 0x3c).intValue() * 0x3c).intValue().longValue() * (long)((0x3e8.intValue() * 0x3c).intValue() * 0x3c).intValue())) / (long)(0x3e8.intValue() * 0x3c).intValue()) + ":");
            } else if((((longValue() - ((longValue() / (long)(((0x3e8.intValue() * 0x3c).intValue() * 0x3c).intValue() * 0x18).intValue()).longValue() * (long)(((0x3e8.intValue() * 0x3c).intValue() * 0x3c).intValue() * 0x18).intValue())) - (((0x3e8.intValue() * 0x3c).intValue() * 0x3c).intValue().longValue() * (long)((0x3e8.intValue() * 0x3c).intValue() * 0x3c).intValue())) / (long)(0x3e8.intValue() * 0x3c).intValue()).longValue() <= 0x0) {
                localStringBuffer14.append("00:");
            }
            if(0x3e8.intValue().longValue() >= 0xa) {
                localStringBuffer15.append(0x3e8.intValue());
            } else if((0x3e8.intValue().longValue() > 0x0) && (0x3e8.intValue().longValue() < 0xa)) {
                localStringBuffer16.append("0" + 0x3e8.intValue());
            } else if(0x3e8.intValue().longValue() <= 0x0) {
                localString1.append("00");
            }
            return localString1.toString();
        }
        
        public static String g(Context p1) {
            // :( Parsing error. Please contact me.
        }
        
        public static String h(Context p1) {
            // :( Parsing error. Please contact me.
        }
        
        public static long i(Context p1) {
            // :( Parsing error. Please contact me.
        }
        
        public static long c(String p1) {
            StatFs locallong1 = new StatFs(p1);
            if(Build.VERSION.SDK_INT < 0x12) {
                return ((long)locallong1.getBlockSize() * (long)locallong1.getAvailableBlocks());
            }
            return (locallong1.getBlockSizeLong() * locallong1.getAvailableBlocksLong());
            return (locallong1.getBlockSizeLong() * locallong1.getAvailableBlocksLong());
        }
        
        public static ArrayList<String> j(Context p1) {
            ArrayList localArrayList1 = new ArrayList();
            localString2 = (StorageManager)getSystemService("storage");
            try {
                if(Environment.getExternalStorageState().endsWith("mounted")) {
                    localFile3 = Environment.getExternalStorageDirectory().getAbsolutePath();
                    localArrayList4.add(Environment.getExternalStorageDirectory());
                }
                0x0 = new Class[0x0];
                localFile3 = StorageManager.class.getMethod("getVolumePaths", 0x0);
                0x0.setAccessible(true);
                0x0 = new Object[0x0];
                localFile3 = 0x0.invoke("storage", 0x0);
                for(; 0x0 < (String[])(String[])0x0.length; 0x0 = 0x0 + 0x1) {
                    localArrayList5.add((String[])(String[])0x0[0x0]);
                }
                ArrayList localArrayList6 = new ArrayList();
                for(; localArrayList1.iterator().hasNext(); localboolean7) {
                    if(!localArrayList6.contains(localArrayList1.iterator().hasNext())) {
                        File localboolean8 = new File(localArrayList1.iterator().hasNext());
                        if(localboolean8.exists()) {
                            localboolean8 = "storage".getClass().getMethod("getVolumeState", new Class[] {String.class});
                            localboolean8 = (String)"storage".getClass().invoke("storage", new Object[] {localArrayList1.iterator().hasNext()});
                            if("mounted".equals("storage".getClass())) {
                                localArrayList9.add(localArrayList1.iterator().hasNext());
                            }
                        }
                        return localArrayList10;
                    } catch(NoSuchMethodException localNoSuchMethodException11) {
                        localNoSuchMethodException11.printStackTrace();
                    } catch(IllegalArgumentException localIllegalArgumentException12) {
                        localIllegalArgumentException12.printStackTrace();
                    } catch(IllegalAccessException localIllegalAccessException13) {
                        localIllegalAccessException13.printStackTrace();
                    } catch(Exception localString2) {
                        localString2.printStackTrace();
                        return null;
                    }
                    // Parsing error may occure here :(
                }
                // Parsing error may occure here :(
            }
            // Parsing error may occure here :(
        }
    }
    